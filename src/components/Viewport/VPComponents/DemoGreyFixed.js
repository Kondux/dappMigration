/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

export default function GreyWeapon({
  eyecolor,
  color,
  armor,
  skin,
  head,
  weapon,
  animationClip,
  ...props
}) {
  const group = useRef();
  const { nodes, materials } = useGLTF("/DemoGreyFixed2-transformed.glb");

  const [dirPath, setDirPath] = useState(
    "/GreyDemo_Slash_Anim-transformed.glb"
  );
  const [animationNumber, setAnimationNumber] = useState(
    "GreyDemo10_Motion_Anim_0"
  );

  useEffect(() => {
    //Logic for loading animations depending on character pose
    // if (weapon === "None") {
    //   setDirPath("/ReptAnim_Idle-transformed.glb");
    //   setAnimationNumber("ReptAnim1_Motion_Anim_0");
    // } else {
    //   setDirPath("/ReptAnim2_Slash-transformed.glb");
    //   setAnimationNumber("ReptAnim2_Motion_Motion_Anim_0");
    // }

    console.log("This is MODEL dirPath", dirPath);
    console.log("This is MODEL animations", animations);
    console.log("This is MODEL ACTIONS", actions);

    console.log("This is MODEL AC", animationClip);

    if (animationClip === "Play") {
      setTimeout(() => {
        console.log("1 clip");
        // actions["CC_Base|FBXExportClip_0.001"].setEffectiveWeight(1);

        if (actions[`${animationNumber}`]._effectiveTimeScale === 0) {
          actions[`${animationNumber}`].setEffectiveTimeScale(1);
        } else {
          actions[`${animationNumber}`].play();
        }
      }, 0);
    } else {
      setTimeout(() => {
        console.log("2 clip");
        // actions["CC_Base|FBXExportClip_0.001"].setEffectiveWeight(1);
        actions[`${animationNumber}`].setEffectiveTimeScale(0);
      }, 0);
    }

    setTimeout(() => {
      // actions["CC_Base|FBXExportClip_0.001"].setEffectiveWeight(1);
      actions[`${animationNumber}`].play();
    }, 0);
  }, [weapon, animationClip]);

  const { animations } = useGLTF(`${dirPath}`);
  const { actions } = useAnimations(animations, group);

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.root} />

      {armor === "None" ? (
        <>
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive0.geometry}
            material={materials.GreyXV1_Tongue}
            skeleton={nodes.node0_primitive0.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive1.geometry}
            material={materials.GreyXV1_Skin_Head}
            material-color={skin}
            skeleton={nodes.node0_primitive1.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive2.geometry}
            material={materials.GreyXV1_Skin_Body}
            material-color={skin}
            skeleton={nodes.node0_primitive2.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive3.geometry}
            material={materials.GreyXV1_Skin_Arm}
            material-color={skin}
            skeleton={nodes.node0_primitive3.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive4.geometry}
            material={materials.GreyXV1_Skin_Leg}
            material-color={skin}
            skeleton={nodes.node0_primitive4.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive5.geometry}
            material={materials.GreyXV1_Nails}
            material-color={skin}
            skeleton={nodes.node0_primitive5.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive6.geometry}
            material={materials.GreyXV1_Eyelash}
            skeleton={nodes.node0_primitive6.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive7.geometry}
            material={materials.GreyXV1_Upper_Teeth}
            skeleton={nodes.node0_primitive7.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive8.geometry}
            material={materials.GreyXV1_Lower_Teeth}
            skeleton={nodes.node0_primitive8.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive9.geometry}
            material={materials.GreyXV1_Eye_Occlusion_R}
            skeleton={nodes.node0_primitive9.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive10.geometry}
            material={materials.GreyXV1_Eye_Occlusion_R}
            skeleton={nodes.node0_primitive10.skeleton}
          />
        </>
      ) : (
        <></>
      )}

      {armor !== "None" ? (
        <>
          {/* HEAD ONLY */}
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive0.geometry}
            material={materials.GreyXV1_Tongue}
            skeleton={nodes.node0_primitive0.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive1.geometry}
            material={materials.GreyXV1_Skin_Head}
            material-color={skin}
            skeleton={nodes.node0_primitive1.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive6.geometry}
            material={materials.GreyXV1_Eyelash}
            skeleton={nodes.node0_primitive6.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive7.geometry}
            material={materials.GreyXV1_Upper_Teeth}
            skeleton={nodes.node0_primitive7.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive8.geometry}
            material={materials.GreyXV1_Lower_Teeth}
            skeleton={nodes.node0_primitive8.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive9.geometry}
            material={materials.GreyXV1_Eye_Occlusion_R}
            skeleton={nodes.node0_primitive9.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive10.geometry}
            material={materials.GreyXV1_Eye_Occlusion_R}
            skeleton={nodes.node0_primitive10.skeleton}
          />
        </>
      ) : (
        <></>
      )}

      {head !== "None" ? (
        <>
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive11.geometry}
            material={materials.PRCCM_SF2Helm}
            material-color={color}
            skeleton={nodes.node0_primitive11.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive12.geometry}
            material={materials.PRCCM_SF2Helm_Glass}
            material-color={color}
            skeleton={nodes.node0_primitive12.skeleton}
          />
        </>
      ) : (
        <></>
      )}

      {armor === "Beta" ? (
        <>
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive13.geometry}
            material={materials.PRCCM_SF2Suit_Upper}
            material-color={color}
            skeleton={nodes.node0_primitive13.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive14.geometry}
            material={materials.PRCCM_SF2Suit_Lower}
            material-color={color}
            skeleton={nodes.node0_primitive14.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive15.geometry}
            material={materials.PRCCM_SF2Gloves}
            material-color={color}
            skeleton={nodes.node0_primitive15.skeleton}
          />
        </>
      ) : (
        <></>
      )}

      <skinnedMesh
        castShadow
        receiveShadow
        frustumCulled={false}
        geometry={nodes.node0_primitive16.geometry}
        material={materials.Ga_Eye_R}
        material-color={eyecolor}
        skeleton={nodes.node0_primitive16.skeleton}
      />
      <skinnedMesh
        castShadow
        receiveShadow
        frustumCulled={false}
        geometry={nodes.node0_primitive17.geometry}
        material={materials.Ga_Eye_R}
        material-color={eyecolor}
        skeleton={nodes.node0_primitive17.skeleton}
      />

      {armor === "Alpha" ? (
        <>
          {/* ARMOR 2 PRCCM*/}

          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive18.geometry}
            material={materials.ATES_F_Suit_H_Merge}
            material-color={color}
            skeleton={nodes.node0_primitive18.skeleton}
          />
        </>
      ) : (
        <></>
      )}

      {weapon !== "None" ? (
        <>
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive19.geometry}
            material={materials.GoZMesh_Default_Material}
            skeleton={nodes.node0_primitive19.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive20.geometry}
            material={materials.GoZMesh_Import_Material}
            skeleton={nodes.node0_primitive20.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive21.geometry}
            material={materials.GoZMesh_Import_Material_0}
            skeleton={nodes.node0_primitive21.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive22.geometry}
            material={materials.GoZMesh_Import_Material_1}
            skeleton={nodes.node0_primitive22.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive23.geometry}
            material={materials.GoZMesh_Default_Material_0}
            material-color={eyecolor}
            skeleton={nodes.node0_primitive23.skeleton}
          />
          <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive24.geometry}
            material={materials.GoZMesh_Default_Material_0}
            material-color={eyecolor}
            skeleton={nodes.node0_primitive24.skeleton}
          />
        </>
      ) : (
        <></>
      )}
    </group>
  );
}

// useGLTF.preload("/DemoGreyFixed-transformed.glb");
