/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from "react";
import * as THREE from "three";
import { useThree, useFrame } from "@react-three/fiber";
import {
  useGLTF,
  useAnimations,
  Sparkles,
  Billboard,
  SpotLight,
  useDepthBuffer,
} from "@react-three/drei";
import { useSpring, a } from "@react-spring/three";
import { LayerMaterial, Depth } from "lamina";

export default function NewCube({ ...props }) {
  const [audio, setAudio] = useState(null);
  const [played, setPlayed] = useState(0);

  const depthBuffer = useDepthBuffer({ frames: 1 });

  useEffect(() => {
    setAudio(new Audio("/Opening.mp3"));
    // only run once on the first render on the client
  }, []);

  const group = useRef();
  const { nodes, materials } = useGLTF("/newCube-transformed.glb");

  const Glow = ({ color, scale = 0.5, near = -2, far = 1.4 }) => (
    <Billboard>
      <mesh>
        {/* <circleGeometry args={[2 * scale, 16]} /> */}
        <LayerMaterial
          transparent
          depthWrite={false}
          blending={THREE.CustomBlending}
          blendEquation={THREE.AddEquation}
          blendSrc={THREE.SrcAlphaFactor}
          blendDst={THREE.DstAlphaFactor}
        >
          <Depth
            colorA={color}
            colorB="black"
            alpha={1}
            mode="normal"
            near={near * scale}
            far={far * scale}
            origin={[0, 0, 0]}
          />
          <Depth
            colorA={color}
            colorB="black"
            alpha={0.5}
            mode="add"
            near={-40 * scale}
            far={far * 1.2 * scale}
            origin={[0, 0, 0]}
          />
          <Depth
            colorA={color}
            colorB="black"
            alpha={1}
            mode="add"
            near={-15 * scale}
            far={far * 0.7 * scale}
            origin={[0, 0, 0]}
          />
          <Depth
            colorA={color}
            colorB="black"
            alpha={1}
            mode="add"
            near={-10 * scale}
            far={far * 0.68 * scale}
            origin={[0, 0, 0]}
          />
        </LayerMaterial>
      </mesh>
    </Billboard>
  );

  function MovingSpot({ vec = new THREE.Vector3(), ...props }) {
    const light = useRef();
    const viewport = useThree((state) => state.viewport);
    useFrame((state) => {
      light.current.target.position.lerp(
        vec.set(
          (state.mouse.x * viewport.width) / 2,
          (state.mouse.y * viewport.height) / 2,
          0
        ),
        0.1
      );
      light.current.target.updateMatrixWorld();
    });
    return (
      <SpotLight
        castShadow
        ref={light}
        penumbra={1}
        distance={6}
        angle={0.35}
        attenuation={5}
        anglePower={4}
        intensity={2}
        {...props}
      />
    );
  }

  // Chest open animation
  const chestOpen = useSpring({
    rotation: props.open
      ? [-Math.PI / 4.75, Math.PI / 4.5, 0]
      : [-Math.PI / 4.75, Math.PI / 4.75, 0],
    position: props.open ? [0, 0, 0] : [-4, -4, -2],
  });

  // rotate the box
  // useFrame(() => {
  //     group.current.rotation.x = group.current.rotation.y += 0.01;
  // });

  // useFrame(({ clock }) => {
  //   const a = clock.getElapsedTime();
  //   group.current.rotation.x = a;
  // });

  // const handleAnimation = () => {
  //     props.setOpen(!props.open);
  //     actions["Open"].play().reset();
  //     // audio.volume = 0.4;
  //     // audio.play();
  // };

  return (
    <a.group onClick={handleAnimation} ref={group} {...props} dispose={null}>
      <MovingSpot
        depthBuffer={depthBuffer}
        color="green"
        position={[3, 3, 2]}
      />
      <MovingSpot
        depthBuffer={depthBuffer}
        color="green"
        position={[1, 3, 0]}
      />

      <mesh
        geometry={nodes.PreCutCircumsizedCube22.geometry}
        material={materials.PreCutCircumsizedCube22}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.1}
      />
      <Glow scale={10 * 1.2} near={-25} color={"green"} />
      <Sparkles
        count={200}
        scale={15 * 2}
        size={30}
        speed={0.1}
        color="lightgreen"
      />
    </a.group>
  );
}

// useGLTF.preload("/newCube-transformed.glb");
