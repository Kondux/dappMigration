/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useState, useMemo } from "react";
import {
  useGLTF,
  useTexture,
  useCursor,
  useAnimations,
  Decal,
} from "@react-three/drei";
import { useGraph } from "@react-three/fiber";
import { a, useSpring } from "@react-spring/three";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";

export default function ReptWeapon({
  eyecolor,
  color,
  armor,
  skin,
  head,
  weapon,
  animationClip,
  armorVariant,
  ...props
}) {
  const { scene, materials } = useGLTF("/ReptNew-transformed.glb");

  const { materials: mat } = useGLTF("/RepBlackArmorBab.glb");

  const [dirPath, setDirPath] = useState("/ReptAnim_Idle-transformed.glb");

  const [actionsVar, setActions] = useState("actions");
  const [namesVar, setNames] = useState("names");

  // const texture1 = useTexture("/Green.png");

  console.log("THIS IS MATERIAL MERGE", materials.__meshes_Merge);
  const meshes_Merge_black = useTexture("/__meshes_Merge_black.png");

  // const prccm_brown_lower = useTexture({
  //   map: "/prccm_brown_lower_diffuse.png",
  // });

  const { animations } = useGLTF("/ReptAnim_Idle-transformed.glb");
  const { animations: animations2 } = useGLTF(
    "/ReptAnim2_Slash-transformed.glb"
  );

  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone);

  // Extract animation actions
  const { ref, actions, names } = useAnimations(animations);
  const {
    ref: ref2,
    actions: actions2,
    names: names2,
  } = useAnimations(animations2);

  // Hover and animation-index states
  const [hovered, setHovered] = useState(false);
  const [animate, setAnimate] = useState(0);
  const [index, setIndex] = useState(0);
  const [variant, setVariant] = useState(materials);

  const { circolor, scale } = useSpring({
    scale: hovered ? [0.75, 0.75, 0.6] : [1, 1, 1],
    circolor: hovered ? "firebrick" : "darkturquoise",
  });
  // Change cursor on hover-state
  useCursor(hovered);

  const onModelClick = () => {
    if (animate === 0) {
      setAnimate(1);
    } else {
      setAnimate(0);
    }
  };

  useEffect(() => {
    //Logic to figure out material variant

    if (armorVariant === "Black") {
      setVariant(mat);
    } else {
      setVariant(materials);
    }
  }, [armorVariant]);

  // Change animation when the index changes
  // useEffect(() => {
  //   // Reset and fade in animation after an index has been changed
  //   console.log("This is index animation", index);
  //   if (animate === 0) {
  //     setDirPath("/ReptAnim_Idle-transformed.glb");
  //   } else {
  //     setDirPath("/ReptAnim2_Slash-transformed.glb");
  //   }
  // }, [animate]);

  useEffect(() => {
    console.log("This is weapon", weapon);
    //Logic for loading animations depending on character pose

    // console.log("This is MODEL dirPath", dirPath);
    // console.log("This is MODEL animations", animations);
    console.log("This is MODEL animate", animate);

    if (animate === 0) {
      if (animationClip === "Play") {
        setTimeout(() => {
          console.log("1 clip");
          // actions["CC_Base|FBXExportClip_0.001"].setEffectiveWeight(1);

          if (actions[names[index]]._effectiveTimeScale === 0) {
            actions[names[index]].setEffectiveTimeScale(1);
          } else {
            actions[names[index]].reset().play();
          }
        }, 0);
      } else {
        setTimeout(() => {
          console.log("2 clip");
          // actions["CC_Base|FBXExportClip_0.001"].setEffectiveWeight(1);
          actions[names[index]].setEffectiveTimeScale(0);
        }, 0);
      }

      // setTimeout(() => {
      //   // actions["CC_Base|FBXExportClip_0.001"].setEffectiveWeight(1);
      //   actions[names[index]].play();
      // }, 0);
    } else {
      if (animationClip === "Play") {
        setTimeout(() => {
          console.log("1 clip");
          // actions["CC_Base|FBXExportClip_0.001"].setEffectiveWeight(1);

          if (actions2[names2[index]]._effectiveTimeScale === 0) {
            actions2[names2[index]].setEffectiveTimeScale(1);
          } else {
            actions2[names2[index]].reset().play();
          }
        }, 0);
      } else {
        setTimeout(() => {
          console.log("2 clip");
          // actions["CC_Base|FBXExportClip_0.001"].setEffectiveWeight(1);
          actions2[names2[index]].setEffectiveTimeScale(0);
        }, 0);
      }

      // setTimeout(() => {
      //   // actions["CC_Base|FBXExportClip_0.001"].setEffectiveWeight(1);
      //   actions2[names2[index]].play();
      // }, 0);
    }
  }, [weapon, animate, animationClip]);

  // // Change animation when the index changes
  // useEffect(() => {
  //   // Reset and fade in animation after an index has been changed
  //   actions[names[index]].reset().fadeIn(0.5).play();
  //   // In the clean-up phase, fade it out
  //   return () => actions[names[index]].fadeOut(0.5);
  // }, [index, actions, names]);
  return (
    <group ref={ref} {...props} dispose={null}>
      <group ref={ref2} {...props} dispose={null}>
        <group
          debug
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => onModelClick()}
        >
          <primitive object={nodes.root} />

          {armor === "None" ? (
            <>
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive0.geometry}
                material={materials.Std_Tongue}
                skeleton={nodes.node0_primitive0.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive1.geometry}
                material={materials.Std_Skin_Head}
                material-color={skin}
                skeleton={nodes.node0_primitive1.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive2.geometry}
                material={materials.Std_Skin_Body}
                material-color={skin}
                skeleton={nodes.node0_primitive2.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive3.geometry}
                material={materials.Std_Skin_Arm}
                material-color={skin}
                skeleton={nodes.node0_primitive3.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive4.geometry}
                material={materials.Std_Skin_Leg}
                material-color={skin}
                skeleton={nodes.node0_primitive4.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive5.geometry}
                material={materials.Std_Nails}
                material-color={skin}
                skeleton={nodes.node0_primitive5.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive6.geometry}
                material={materials.Std_Eyelash}
                skeleton={nodes.node0_primitive6.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive7.geometry}
                material={materials.Std_Tearline_R}
                skeleton={nodes.node0_primitive7.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive8.geometry}
                material={materials.Std_Tearline_R}
                skeleton={nodes.node0_primitive8.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive9.geometry}
                material={materials.Std_Tearline_R}
                skeleton={nodes.node0_primitive9.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive10.geometry}
                material={materials.Std_Tearline_R}
                skeleton={nodes.node0_primitive10.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive11.geometry}
                material={materials.Std_Eye_R}
                material-color={eyecolor}
                skeleton={nodes.node0_primitive11.skeleton}
              />
              {/* <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive12.geometry}
            material={materials.Std_Cornea_R}
            skeleton={nodes.node0_primitive12.skeleton}
          /> */}
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive13.geometry}
                material={materials.Std_Eye_L}
                material-color={eyecolor}
                skeleton={nodes.node0_primitive13.skeleton}
              />
              {/* <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive14.geometry}
            material={materials.Std_Cornea_L}
            skeleton={nodes.node0_primitive14.skeleton}
          /> */}
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive15.geometry}
                material={materials.Std_Upper_Teeth}
                skeleton={nodes.node0_primitive15.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive16.geometry}
                material={materials.Std_Lower_Teeth}
                skeleton={nodes.node0_primitive16.skeleton}
              />
            </>
          ) : (
            <></>
          )}

          {armor !== "None" ? (
            <>
              {/* HEAD ONLY */}
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive0.geometry}
                material={materials.Std_Tongue}
                skeleton={nodes.node0_primitive0.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive1.geometry}
                material={materials.Std_Skin_Head}
                material-color={skin}
                skeleton={nodes.node0_primitive1.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive6.geometry}
                material={materials.Std_Eyelash}
                skeleton={nodes.node0_primitive6.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive7.geometry}
                material={materials.Std_Tearline_R}
                skeleton={nodes.node0_primitive7.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive8.geometry}
                material={materials.Std_Tearline_R}
                skeleton={nodes.node0_primitive8.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive9.geometry}
                material={materials.Std_Tearline_R}
                skeleton={nodes.node0_primitive9.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive10.geometry}
                material={materials.Std_Tearline_R}
                skeleton={nodes.node0_primitive10.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive11.geometry}
                material={materials.Std_Eye_R}
                material-color={eyecolor}
                skeleton={nodes.node0_primitive11.skeleton}
              />
              {/* <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive12.geometry}
            material={materials.Std_Cornea_R}
            skeleton={nodes.node0_primitive12.skeleton}
          /> */}
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive13.geometry}
                material={materials.Std_Eye_L}
                material-color={eyecolor}
                skeleton={nodes.node0_primitive13.skeleton}
              />
              {/* <skinnedMesh
            castShadow
            receiveShadow
            frustumCulled={false}
            geometry={nodes.node0_primitive14.geometry}
            material={materials.Std_Cornea_L}
            skeleton={nodes.node0_primitive14.skeleton}
          /> */}
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive15.geometry}
                material={materials.Std_Upper_Teeth}
                skeleton={nodes.node0_primitive15.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive16.geometry}
                material={materials.Std_Lower_Teeth}
                skeleton={nodes.node0_primitive16.skeleton}
              />
            </>
          ) : (
            <></>
          )}

          {armor === "Beta" ? (
            <>
              {/* UPPER + LOWER */}
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive18.geometry}
                material={variant.__meshes_Merge}
                // material-map-flipY={false}
                // material-map-wrapS={1000}
                // material-map-wrapT={1000}
                // material-map={meshes_Merge_black}
                material-color={color}
                skeleton={nodes.node0_primitive18.skeleton}
              >
                {/* <meshPhysicalMaterial {...meshes_Merge_black} /> */}
                {/* <Decal debug>
                  <meshBasicMaterial map={texture1} />
                </Decal> */}
              </skinnedMesh>

              {/* GLOVES */}
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive19.geometry}
                material={materials.__meshes_Merge_0}
                material-color={color}
                skeleton={nodes.node0_primitive19.skeleton}
              />
            </>
          ) : (
            <></>
          )}

          {armor === "Alpha" ? (
            <>
              {/* ARMOR 2 */}
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive17.geometry}
                material={materials.ATES_F_Suit_H_Merge}
                material-color={color}
                skeleton={nodes.node0_primitive17.skeleton}
              />
            </>
          ) : (
            <></>
          )}

          {head !== "None" ? (
            <>
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive20.geometry}
                material={materials.PRCCM_SF2Helm}
                material-color={color}
                skeleton={nodes.node0_primitive20.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive21.geometry}
                material={materials.PRCCM_SF2Helm_Glass}
                material-color={color}
                skeleton={nodes.node0_primitive21.skeleton}
              />
            </>
          ) : (
            <></>
          )}

          {weapon !== "None" ? (
            <>
              {/* LASER SWORD */}
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive22.geometry}
                material={materials.GoZMesh_Default_Material}
                skeleton={nodes.node0_primitive22.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive23.geometry}
                material={materials.GoZMesh_Import_Material}
                skeleton={nodes.node0_primitive23.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive24.geometry}
                material={materials.GoZMesh_Import_Material_0}
                skeleton={nodes.node0_primitive24.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive25.geometry}
                material={materials.GoZMesh_Import_Material_1}
                skeleton={nodes.node0_primitive25.skeleton}
              />

              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive26.geometry}
                material={materials.GoZMesh_Default_Material_0}
                material-color={eyecolor}
                skeleton={nodes.node0_primitive26.skeleton}
              />

              <skinnedMesh
                castShadow
                receiveShadow
                frustumCulled={false}
                geometry={nodes.node0_primitive27.geometry}
                material={materials.GoZMesh_Default_Material_1}
                material-color={eyecolor}
                skeleton={nodes.node0_primitive27.skeleton}
              />
            </>
          ) : (
            <></>
          )}
        </group>
        <a.mesh receiveShadow position={[0, 3, -1]} scale={scale}>
          <circleBufferGeometry args={[0.6, 64]} />
          <a.meshStandardMaterial color={circolor} />
        </a.mesh>
      </group>
    </group>
  );
}

// useGLTF.preload("/ReptNew-transformed.glb");
