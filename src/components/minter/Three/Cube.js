/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Memorie (https://sketchfab.com/Memorie)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/sci-fi-cube-2c4b8f6de26b4e869d342a92d881debe
title: Sci-Fi Cube
*/

import React, { useRef, useState, useEffect } from "react";
import * as THREE from "three";
import { useThree, useFrame } from "@react-three/fiber";
import {
  useGLTF,
  useAnimations,
  Glow,
  Sparkles,
  Billboard,
  SpotLight,
  useDepthBuffer,
} from "@react-three/drei";
import { useSpring, a } from "@react-spring/three";
import { LayerMaterial, Depth } from "lamina";

export default function Model({ ...props }) {
  const [audio, setAudio] = useState(null);
  const [played, setPlayed] = useState(0);
  const depthBuffer = useDepthBuffer({ frames: 1 });
  useEffect(() => {
    setAudio(new Audio("/Opening.mp3"));
    // only run once on the first render on the client
  }, []);

  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/Cube.glb");
  const { actions } = useAnimations(animations, group);

  console.log(actions);
  // function for the chest open & audio
  const handleAnimation = () => {
    props.setOpen(!props.open);
    actions["Open"].play().reset();
    // audio.volume = 0.4;
    // audio.play();
  };

  const Glow = ({ color, scale = 0.5, near = -2, far = 1.4 }) => (
    <Billboard>
      <mesh>
        {/* <circleGeometry args={[2 * scale, 16]} /> */}
        <LayerMaterial
          transparent
          depthWrite={false}
          blending={THREE.CustomBlending}
          blendEquation={THREE.AddEquation}
          blendSrc={THREE.SrcAlphaFactor}
          blendDst={THREE.DstAlphaFactor}
        >
          <Depth
            colorA={color}
            colorB="black"
            alpha={1}
            mode="normal"
            near={near * scale}
            far={far * scale}
            origin={[0, 0, 0]}
          />
          <Depth
            colorA={color}
            colorB="black"
            alpha={0.5}
            mode="add"
            near={-40 * scale}
            far={far * 1.2 * scale}
            origin={[0, 0, 0]}
          />
          <Depth
            colorA={color}
            colorB="black"
            alpha={1}
            mode="add"
            near={-15 * scale}
            far={far * 0.7 * scale}
            origin={[0, 0, 0]}
          />
          <Depth
            colorA={color}
            colorB="black"
            alpha={1}
            mode="add"
            near={-10 * scale}
            far={far * 0.68 * scale}
            origin={[0, 0, 0]}
          />
        </LayerMaterial>
      </mesh>
    </Billboard>
  );

  function MovingSpot({ vec = new THREE.Vector3(), ...props }) {
    const light = useRef();
    const viewport = useThree((state) => state.viewport);
    useFrame((state) => {
      light.current.target.position.lerp(
        vec.set(
          (state.mouse.x * viewport.width) / 2,
          (state.mouse.y * viewport.height) / 2,
          0
        ),
        0.1
      );
      light.current.target.updateMatrixWorld();
    });
    return (
      <SpotLight
        castShadow
        ref={light}
        penumbra={1}
        distance={6}
        angle={0.35}
        attenuation={5}
        anglePower={4}
        intensity={2}
        {...props}
      />
    );
  }
  // Chest open animation
  const chestOpen = useSpring({
    rotation: props.open
      ? [-Math.PI / 4.75, Math.PI / 4.5, 0]
      : [-Math.PI / 4.75, Math.PI / 4.75, 0],
    position: props.open ? [0, 0, 0] : [-4, -4, -2],
  });

  // useFrame(({ clock }) => {
  //     const a = clock.getElapsedTime();
  //     group.current.rotation.y = a / 9;
  // });

  return (
    <group onClick={handleAnimation} ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <a.group
          name="Sketchfab_model"
          rotation={chestOpen.rotation}
          // rotation={[-Math.PI / 2, 0, 0]}
          scale={1}
        >
          <group
            name="dd6ef14ae51b43909b1ee178a049bd4efbx"
            rotation={[Math.PI / 2, 0, 0]}
          >
            <group name="Object_2">
              <group name="RootNode">
                <group
                  name="Metal_Shell"
                  position={[0, 0.28, 0]}
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={100}
                >
                  <mesh
                    name="0"
                    // castShadow
                    // receiveShadow
                    geometry={nodes["0"].geometry}
                    material={materials.Metal_Shell}
                    morphTargetDictionary={nodes["0"].morphTargetDictionary}
                    morphTargetInfluences={nodes["0"].morphTargetInfluences}
                  >
                    <Sparkles
                      count={100}
                      scale={15 * 2}
                      size={30}
                      speed={0.1}
                      color="lightgreen"
                    />
                    {/* {props.open ? (
                                           
                                        ) : (
                                            <></>
                                        )} */}
                  </mesh>
                </group>
                <group
                  name="Power_Cube"
                  position={[0, 19.44, 0]}
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={94.1}
                >
                  <MovingSpot
                    depthBuffer={depthBuffer}
                    color="green"
                    position={[3, 3, 2]}
                  />
                  <MovingSpot
                    depthBuffer={depthBuffer}
                    color="green"
                    position={[1, 3, 0]}
                  />
                  <mesh
                    castShadow
                    receiveShadow
                    name="Power_Cube_Emission_0"
                    geometry={nodes.Power_Cube_Emission_0.geometry}
                    material={materials.Emission}
                    material-color="lime"
                  >
                    <Glow scale={10 * 1.2} near={-25} color={"green"} />
                  </mesh>
                </group>
              </group>
            </group>
          </group>
        </a.group>
      </group>
    </group>
  );
}

// useGLTF.preload("/Cube.glb");
